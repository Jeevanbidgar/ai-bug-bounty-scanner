# AI Bug Bounty Scanner - Environment Configuration Example
# =========================================================
# Copy this file to .env and fill in your actual values

# Application Configuration
# -------------------------
FLASK_ENV=development
FLASK_DEBUG=True
SECRET_KEY=your-super-secret-key-change-this-in-production
JWT_SECRET_KEY=your-jwt-secret-key-change-this-in-production

# Database Configuration
# ----------------------
DATABASE_URL=sqlite:///instance/bug_bounty_scanner.db
SQLALCHEMY_DATABASE_URI=sqlite:///instance/bug_bounty_scanner.db
SQLALCHEMY_TRACK_MODIFICATIONS=False

# Server Configuration
# --------------------
HOST=0.0.0.0
PORT=5000
DEBUG=True

# Security Configuration
# ----------------------
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
JWT_ACCESS_TOKEN_EXPIRES=3600
JWT_REFRESH_TOKEN_EXPIRES=86400
PASSWORD_SALT=your-password-salt-change-this

# External API Keys (Required for threat intelligence)
# ----------------------------------------------------
# Get your API keys from the respective services:
# - AbuseIPDB: https://www.abuseipdb.com/api
# - Shodan: https://account.shodan.io/
# - VirusTotal: https://www.virustotal.com/gui/join-us

ABUSEIPDB_API_KEY=your-abuseipdb-api-key-here
SHODAN_API_KEY=your-shodan-api-key-here
VIRUSTOTAL_API_KEY=your-virustotal-api-key-here

# Security Tools Configuration
# ----------------------------
# Install these tools and update paths as needed:
# sudo apt-get install nmap nikto sqlmap
# go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
# go install github.com/OJ/gobuster/v3@latest

NMAP_PATH=nmap
NIKTO_PATH=nikto
SQLMAP_PATH=sqlmap
SUBFINDER_PATH=subfinder
GOBUSTER_PATH=gobuster

# Optional: Burp Suite Pro API (requires license)
BURP_API_URL=http://127.0.0.1:1337
BURP_API_KEY=your-burp-api-key

# Optional: OWASP ZAP API
ZAP_API_URL=http://127.0.0.1:8080
ZAP_API_KEY=your-zap-api-key

# Scanning Configuration
# ----------------------
MAX_CONCURRENT_SCANS=5
SCAN_TIMEOUT=3600
SCAN_RESULTS_RETENTION_DAYS=30
AUTO_CLEANUP_ENABLED=True

# Rate Limiting
# -------------
RATE_LIMIT_ENABLED=True
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_REQUESTS_PER_HOUR=1000

# Logging Configuration
# ---------------------
LOG_LEVEL=INFO
LOG_FILE=logs/app.log
LOG_MAX_SIZE=10485760
LOG_BACKUP_COUNT=5

# Redis Configuration (Optional - for background tasks)
# -----------------------------------------------------
# Install Redis: sudo apt-get install redis-server
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# Email Configuration (Optional - for notifications)
# --------------------------------------------------
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password
MAIL_DEFAULT_SENDER=your-email@gmail.com

# Notification Configuration (Optional)
# -------------------------------------
ENABLE_EMAIL_NOTIFICATIONS=False
ENABLE_SLACK_NOTIFICATIONS=False
SLACK_WEBHOOK_URL=your-slack-webhook-url
SLACK_CHANNEL=#security-alerts

# File Upload Configuration
# -------------------------
MAX_CONTENT_LENGTH=16777216
UPLOAD_FOLDER=uploads
ALLOWED_EXTENSIONS=txt,pdf,png,jpg,jpeg,gif,csv,json,xml

# Feature Flags
# -------------
ENABLE_ADVANCED_SCANNING=True
ENABLE_THREAT_INTELLIGENCE=True
ENABLE_AUTOMATED_REPORTING=True
ENABLE_REAL_TIME_MONITORING=True
ENABLE_API_FUZZING=True
ENABLE_SOCIAL_ENGINEERING_CHECKS=False

# Testing Configuration
# ----------------------
TESTING=False
TEST_DATABASE_URL=sqlite:///:memory:
DB_PASSWORD=scanner_pass

# Redis Configuration
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# External API Keys (Optional - Leave empty if not available)
SHODAN_API_KEY=
VIRUSTOTAL_API_KEY=
ABUSEIPDB_API_KEY=

# Tool Paths (Will be set automatically in Docker)
NUCLEI_PATH=nuclei
SUBLIST3R_PATH=sublist3r
AMASS_PATH=amass
SQLMAP_PATH=sqlmap
BURP_JAR_PATH=

# Security Settings
SESSION_EXPIRE_DAYS=7
JWT_ACCESS_TOKEN_EXPIRES_HOURS=1
JWT_REFRESH_TOKEN_EXPIRES_DAYS=30

# Scanning Configuration
SCAN_TIMEOUT=3600
MAX_CONCURRENT_SCANS=5
RATE_LIMIT_PER_MINUTE=60

# Logging
LOG_LEVEL=INFO

# Docker specific settings (used in docker-compose)
POSTGRES_DB=bug_bounty_scanner
POSTGRES_USER=scanner_user
POSTGRES_PASSWORD=scanner_pass_2024

# Production Security (Change these in production!)
ADMIN_USERNAME=admin
ADMIN_PASSWORD=change_me_in_production
ADMIN_EMAIL=admin@yourdomain.com
