version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: scanner-postgres
    environment:
      POSTGRES_DB: bug_bounty_scanner
      POSTGRES_USER: scanner_user
      POSTGRES_PASSWORD: scanner_pass_2024
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scanner_user -d bug_bounty_scanner"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scanner-network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: scanner-redis
    command: redis-server --appendonly yes --requirepass redis_pass_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scanner-network

  # Main Flask Application
  web:
    build: .
    container_name: scanner-web
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://scanner_user:scanner_pass_2024@postgres:5432/bug_bounty_scanner
      - REDIS_URL=redis://:redis_pass_2024@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_pass_2024@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_pass_2024@redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
      - SHODAN_API_KEY=${SHODAN_API_KEY:-}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY:-}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY:-}
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./instance:/app/instance
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - scanner-network

  # Celery Worker for background tasks
  celery-worker:
    build: .
    container_name: scanner-celery-worker
    command: celery -A backend-app.celery worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://scanner_user:scanner_pass_2024@postgres:5432/bug_bounty_scanner
      - REDIS_URL=redis://:redis_pass_2024@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_pass_2024@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_pass_2024@redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - SHODAN_API_KEY=${SHODAN_API_KEY:-}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY:-}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY:-}
    volumes:
      - ./logs:/app/logs
      - ./exports:/app/exports
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scanner-network
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build: .
    container_name: scanner-celery-beat
    command: celery -A backend-app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://scanner_user:scanner_pass_2024@postgres:5432/bug_bounty_scanner
      - REDIS_URL=redis://:redis_pass_2024@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_pass_2024@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_pass_2024@redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scanner-network
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build: .
    container_name: scanner-flower
    command: celery -A backend-app.celery flower --port=5555
    environment:
      - FLASK_ENV=production
      - CELERY_BROKER_URL=redis://:redis_pass_2024@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_pass_2024@redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - scanner-network
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: scanner-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - scanner-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  scanner-network:
    driver: bridge
