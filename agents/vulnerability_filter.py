# Vulnerability Exclusion Configuration
"""
Central configuration for excluding low-impact vulnerabilities that are typically
not accepted in bug bounty programs or professional assessments.

This configuration helps focus scanning on high-impact, exploitable vulnerabilities.
Updated to work with high-impact vulnerability prioritization.
"""

from typing import Dict, List, Any
from .high_impact_vulnerabilities import (
    get_vulnerability_priority_score, 
    filter_vulnerabilities_by_impact,
    get_focused_scan_config
)

# Categories of vulnerabilities to exclude or filter
EXCLUDED_VULNERABILITY_CATEGORIES = {
    
    # 1. UI/UX & Non-Security Issues
    'cosmetic_issues': {
        'enabled': False,
        'keywords': ['cosmetic', 'visual', 'layout', 'ui', 'ux'],
        'reason': 'No security impact'
    },
    
    'content_spoofing': {
        'enabled': False,
        'keywords': ['content spoofing', 'text injection'],
        'reason': 'Without HTML/CSS modification capability'
    },
    
    'tabnabbing': {
        'enabled': False,
        'keywords': ['tabnabbing', 'tab focus'],
        'reason': 'No additional impact demonstrated'
    },
    
    # 2. Security Headers & Best Practices (without demonstrated impact)
    'generic_security_headers': {
        'enabled': False,
        'keywords': ['missing.*header', 'x-frame-options', 'x-xss-protection', 'x-content-type-options'],
        'reason': 'No demonstrated exploit or impact on non-sensitive pages'
    },
    
    'weak_csp': {
        'enabled': False,
        'keywords': ['content-security-policy', 'csp'],
        'reason': 'Without demonstrated bypass'
    },
    
    'missing_hsts': {
        'enabled': False,
        'keywords': ['strict-transport-security', 'hsts'],
        'reason': 'Without practical exploit demonstration'
    },
    
    'generic_cookie_flags': {
        'enabled': False,
        'keywords': ['httponly', 'secure.*cookie'],
        'reason': 'On non-sensitive cookies without exploitation path'
    },
    
    # 3. CSRF on non-sensitive forms
    'csrf_non_sensitive': {
        'enabled': False,
        'keywords': ['csrf.*unauthenticated', 'csrf.*non-sensitive'],
        'reason': 'On unauthenticated or non-sensitive forms'
    },
    
    # 4. Injection without working PoC
    'vulnerable_libraries_no_poc': {
        'enabled': False,
        'keywords': ['vulnerable.*library', 'outdated.*component'],
        'reason': 'Without working proof of concept on target application'
    },
    
    'csv_injection_no_exploit': {
        'enabled': False,
        'keywords': ['csv injection'],
        'reason': 'Without demonstrated threat or exploit'
    },
    
    # 5. Network & Service Misconfigurations
    'ssl_best_practices': {
        'enabled': False,
        'keywords': ['weak cipher', 'ssl.*configuration'],
        'reason': 'Without demonstration of exploit'
    },
    
    'version_disclosure': {
        'enabled': False,
        'keywords': ['version disclosure', 'banner grabbing', 'server.*header'],
        'reason': 'Without direct exploitation path'
    },
    
    'information_disclosure_minor': {
        'enabled': False,
        'keywords': ['error message', 'stack trace', 'descriptive header'],
        'reason': 'Limited to non-exploitable information'
    },
    
    # 6. Authentication & Access Control
    'rate_limiting_non_auth': {
        'enabled': False,
        'keywords': ['rate limiting.*non-authentication', 'brute force.*public'],
        'reason': 'On non-authentication endpoints'
    },
    
    'open_redirect_no_impact': {
        'enabled': False,
        'keywords': ['open redirect'],
        'reason': 'Without proof of token theft or phishing facilitation'
    },
    
    'outdated_browser_vulns': {
        'enabled': False,
        'keywords': ['outdated browser'],
        'reason': 'Affecting only very old browsers'
    },
    
    # 7. Advanced Attacks Requiring Special Conditions
    'mitm_attacks': {
        'enabled': False,
        'keywords': ['man-in-the-middle', 'mitm'],
        'reason': 'Requires MITM or physical access'
    },
    
    'dos_attacks': {
        'enabled': False,
        'keywords': ['denial of service', 'dos', 'ddos', 'brute force flooding'],
        'reason': 'DoS attacks typically out of scope'
    },
    
    # 8. Email & External Configuration
    'email_config_no_abuse': {
        'enabled': False,
        'keywords': ['spf.*missing', 'dkim.*missing', 'dmarc.*missing'],
        'reason': 'Without demonstrated phishing or spoofing abuse'
    },
    
    # 9. User & Context Specific Issues
    'contrived_user_action': {
        'enabled': False,
        'keywords': ['unlikely.*user.*action', 'contrived.*sequence'],
        'reason': 'Requiring highly unlikely user behavior'
    },
    
    'non_production_issues': {
        'enabled': False,
        'keywords': ['staging', 'demo', 'test.*environment'],
        'reason': 'On non-production environments'
    },
    
    'data_dumps_no_impact': {
        'enabled': False,
        'keywords': ['data dump', 'log.*internal'],
        'reason': 'Without exploitable impact'
    }
}

# Minimum CVSS scores for different environments
MINIMUM_CVSS_SCORES = {
    'bug_bounty': 4.0,      # Bug bounty programs typically want medium+ severity
    'penetration_test': 3.0, # Pen tests may include lower severity for completeness
    'red_team': 5.0,        # Red team exercises focus on high-impact only
    'compliance': 2.0       # Compliance scans may need to report everything
}

# Keywords that indicate high-impact vulnerabilities (always include)
HIGH_IMPACT_KEYWORDS = [
    'rce', 'remote code execution', 'command injection', 'sql injection',
    'authentication bypass', 'privilege escalation', 'arbitrary file',
    'directory traversal', 'xxe', 'ssrf', 'deserialization',
    'buffer overflow', 'memory corruption', 'account takeover',
    'broken access control', 'template injection', 'code execution'
]

# Keywords that indicate exploitable conditions (context-sensitive inclusion)
EXPLOITABLE_CONDITIONS = [
    'working poc', 'proof of concept', 'demonstrated exploit',
    'sensitive data', 'authentication', 'admin', 'payment',
    'financial', 'personal information', 'private key', 'database access',
    'file upload', 'user credentials', 'session hijacking'
]

def should_exclude_vulnerability(vulnerability: dict, scan_mode: str = 'focused') -> bool:
    """
    Determine if a vulnerability should be excluded based on configuration.
    Now integrates with high-impact vulnerability prioritization.
    
    Args:
        vulnerability: Dictionary containing vulnerability details
        scan_mode: Type of scan ('focused', 'critical_only', 'bug_bounty', etc.)
    
    Returns:
        bool: True if vulnerability should be excluded, False otherwise
    """
    title = vulnerability.get('title', '').lower()
    description = vulnerability.get('description', '').lower()
    category = vulnerability.get('category', vulnerability.get('type', 'Unknown'))
    cvss = vulnerability.get('cvss', 0)
    
    # For focused scanning modes, use priority-based filtering
    if scan_mode in ['focused', 'critical_only', 'comprehensive']:
        priority_score = get_vulnerability_priority_score(category)
        
        # Define priority thresholds for different modes
        priority_thresholds = {
            'critical_only': 2,     # Only top 2 priority categories
            'focused': 4,           # Top 4 priority categories  
            'comprehensive': 5      # All 5 priority categories
        }
        
        max_priority = priority_thresholds.get(scan_mode, 4)
        if priority_score > max_priority:
            return True  # Exclude low-priority categories
    
    # Always include high-impact vulnerabilities regardless of mode
    if any(keyword in title or keyword in description for keyword in HIGH_IMPACT_KEYWORDS):
        return False
    
    # Check CVSS threshold based on scan mode
    min_cvss_thresholds = {
        'critical_only': 7.0,    # High and Critical only
        'focused': 4.0,          # Medium and above
        'comprehensive': 3.0,    # Low-Medium and above
        'bug_bounty': 4.0,       # Medium and above
        'penetration_test': 3.0,
        'red_team': 5.0,
        'compliance': 2.0
    }
    
    min_cvss = min_cvss_thresholds.get(scan_mode, 4.0)
    if cvss < min_cvss:
        return True
    
    # Check for exploitable conditions that override exclusions
    has_exploitable_condition = any(
        keyword in title or keyword in description 
        for keyword in EXPLOITABLE_CONDITIONS
    )
    
    if has_exploitable_condition:
        return False  # Include if exploitable conditions are present
    
    # For focused modes, be more aggressive about excluding generic issues
    if scan_mode in ['focused', 'critical_only']:
        # Exclude more aggressively for focused scans
        exclusion_keywords = [
            'information disclosure', 'version disclosure', 'banner grabbing',
            'weak cipher', 'missing header', 'cookie flag', 'hsts',
            'content-security-policy', 'clickjacking', 'cache control',
            'robots.txt', 'directory listing', 'error message'
        ]
        
        if any(keyword in title or keyword in description for keyword in exclusion_keywords):
            return True
    
    # Check standard exclusion categories (less aggressive for focused scans)
    for category_name, config in EXCLUDED_VULNERABILITY_CATEGORIES.items():
        if not config['enabled']:  # Category is disabled (excluded)
            for keyword in config['keywords']:
                if keyword in title or keyword in description:
                    # For focused scans, only exclude if no exploitable conditions
                    if scan_mode in ['focused', 'critical_only'] and has_exploitable_condition:
                        continue
                    return True  # Exclude this vulnerability
    
    return False  # Include by default


def filter_vulnerabilities(vulnerabilities: list, scan_mode: str = 'focused') -> list:
    """
    Filter vulnerabilities based on exclusion configuration and high-impact prioritization.
    
    Args:
        vulnerabilities: List of vulnerability dictionaries
        scan_mode: Type of scan to determine filtering level
    
    Returns:
        list: Filtered and prioritized vulnerabilities list
    """
    # First, apply priority-based filtering for focused modes
    if scan_mode in ['focused', 'critical_only', 'comprehensive']:
        priority_limits = {
            'critical_only': 2,
            'focused': 4,
            'comprehensive': 5
        }
        max_priority = priority_limits.get(scan_mode, 4)
        vulnerabilities = filter_vulnerabilities_by_impact(vulnerabilities, max_priority)
    
    # Then apply standard exclusion filtering
    filtered = []
    excluded_count = 0
    
    for vuln in vulnerabilities:
        if not should_exclude_vulnerability(vuln, scan_mode):
            filtered.append(vuln)
        else:
            excluded_count += 1
    
    if excluded_count > 0:
        print(f"ℹ️ Excluded {excluded_count} low-impact vulnerabilities for {scan_mode} mode")
    
    return filtered


def get_scan_mode_info() -> dict:
    """Get information about available scan modes and their purposes."""
    return {
        'critical_only': {
            'description': 'Focus only on RCE and direct access control bypasses - maximum impact',
            'min_cvss': 7.0,
            'priority_limit': 2,
            'exclusions': 'Maximum exclusions for critical findings only',
            'estimated_time': '30 minutes'
        },
        'focused': {
            'description': 'Balanced approach covering top 4 high-impact vulnerability categories', 
            'min_cvss': 4.0,
            'priority_limit': 4,
            'exclusions': 'High exclusions for quality findings',
            'estimated_time': '1 hour'
        },
        'comprehensive': {
            'description': 'All 5 priority categories with deep scanning techniques',
            'min_cvss': 3.0,
            'priority_limit': 5,
            'exclusions': 'Moderate exclusions for thorough coverage',
            'estimated_time': '2 hours'
        },
        'bug_bounty': {
            'description': 'Traditional bug bounty mode - high-impact exploitable vulnerabilities',
            'min_cvss': 4.0,
            'exclusions': 'High exclusions for bug bounty reporting',
            'estimated_time': '1-2 hours'
        },
        'penetration_test': {
            'description': 'Include medium+ severity findings for comprehensive security assessment',
            'min_cvss': 3.0,
            'exclusions': 'Moderate exclusions for thorough coverage',
            'estimated_time': '2-3 hours'
        },
        'red_team': {
            'description': 'Only critical and high-impact vulnerabilities for attack simulation',
            'min_cvss': 5.0,
            'exclusions': 'Maximum exclusions for attack focus',
            'estimated_time': '1 hour'
        },
        'compliance': {
            'description': 'Include all findings for regulatory compliance reporting',
            'min_cvss': 2.0,
            'exclusions': 'Minimal exclusions for compliance completeness',
            'estimated_time': '3-4 hours'
        }
    }
